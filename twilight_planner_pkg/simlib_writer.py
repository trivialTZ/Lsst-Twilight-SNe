from __future__ import annotations
from dataclasses import dataclass
from typing import Optional, TextIO


@dataclass
class SimlibHeader:
    """Header information for a SIMLIB file."""

    SURVEY: str = "LSST_TWILIGHT"
    FILTERS: str = "ugrizY"
    PIXSIZE: float = 0.200
    NPE_PIXEL_SATURATE: int = 90000
    PHOTFLAG_SATURATE: int = 2048
    PSF_UNIT: str = "NEA_PIXEL"


class SimlibWriter:
    """Minimal SNANA SIMLIB writer."""

    def __init__(self, fp: TextIO, header: SimlibHeader):
        """Create a writer.

        Parameters
        ----------
        fp : TextIO
            Open file-like object for writing.
        header : SimlibHeader
            Header configuration.
        """

        self.fp = fp
        self.header = header
        self._idx = 0

    def write_header(self) -> None:
        """Write the SIMLIB header block."""

        h = self.header
        w = self.fp.write
        w("# Generated by twilight_planner\n")
        w(f"SURVEY:   {h.SURVEY}\n")
        w(f"FILTERS:  {h.FILTERS}\n")
        w(f"PIXSIZE:  {h.PIXSIZE:.3f}\n")
        w(f"NPE_PIXEL_SATURATE: {h.NPE_PIXEL_SATURATE}\n")
        w(f"PHOTFLAG_SATURATE:  {h.PHOTFLAG_SATURATE}\n")
        w(f"PSF_UNIT:  {h.PSF_UNIT}\n")
        w("\n")

    def start_libid(
        self,
        libid: int,
        ra_deg: float,
        dec_deg: float,
        mwebv: float = 0.02,
        redshift: float = 0.0,
        peakmjd: Optional[float] = None,
        comment: str = "",
    ) -> None:
        """Begin a new LIBID block for a target."""

        w = self.fp.write
        w("#--------------------------------------------\n")
        w(f"LIBID: {libid:7d}\n")
        w(f"RA: {ra_deg:11.6f}   DEC: {dec_deg:11.6f}   MWEBV: {mwebv:6.4f}\n")
        w(
            f"NOBS: 0   PIXSIZE: {self.header.PIXSIZE:6.3f}   REDSHIFT: {redshift:8.5f}   PEAKMJD: {peakmjd or 0.0:8.3f}\n"
        )
        if comment:
            w(f"# {comment}\n")

    def add_epoch(
        self,
        mjd: float,
        band: str,
        gain: float,
        rdnoise: float,
        skysig: float,
        psf1: float,
        psf2: float,
        psfrat: float,
        zpavg: float,
        zperr: float,
        mag: float = -99.0,
    ) -> None:
        """Write an `S:` row describing one exposure."""

        self._idx += 1
        self.fp.write(
            f"S: {mjd:11.3f}  {self._idx:5d}  {band:2s}  {gain:5.2f}  {rdnoise:5.2f}  {skysig:7.2f}  {psf1:5.2f}  {psf2:4.2f}  {psfrat:5.2f}  {zpavg:6.3f}  {zperr:5.3f}  {mag:>6}\n"
        )

    def close(self) -> None:
        """Close the underlying file handle."""

        self.fp.close()
